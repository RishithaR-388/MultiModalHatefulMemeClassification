import argparse 

def parse_opt():
    parser=argparse.ArgumentParser()
    parser.add_argument('--DATASET',type=str,default='mem')
    #related to few-shot learning setting
    parser.add_argument('--FEW_SHOT',type=bool,default=False)
    parser.add_argument('--FINE_GRIND',type=bool,default=False)
    parser.add_argument('--NUM_SHOTS',type=int,default=16)#test on 16,64,128 for k-shot
    parser.add_argument('--MODEL',type=str,default='pbm')
    parser.add_argument('--UNIMODAL',type=bool,default=False)#for roberta-based caption model
    #path configuration
    parser.add_argument('--DATA',type=str,default='../data')
    parser.add_argument('--CAPTION_PATH',type=str,default='../caption')
    parser.add_argument('--RESULT',type=str,default='./result')
    
    #fixed parameters
    parser.add_argument('--FEAT_DIM',type=int,default=2048)
    parser.add_argument('--CLIP_DIM',type=int,default=512)
    parser.add_argument('--BERT_DIM',type=int,default=768)
    parser.add_argument('--ROBERTA_DIM',type=int,default=1024)
    parser.add_argument('--NUM_FOLD',type=int,default=5)
    parser.add_argument('--EMB_DIM',type=int,default=300)
    parser.add_argument('--NUM_LABELS',type=int,default=2)
    
    parser.add_argument('--POS_WORD',type=str,default='good')
    parser.add_argument('--NEG_WORD',type=str,default='bad')
    #whether adding constratins to demonstrations
    #if added, only SIM_RATE of the most similar demonstrations will be sampled
    #the similarity is measured by features from clip
    #IMG_RATE * img_sim + TEXT_RATE * text_sim
    #the image features generated by clip is either using clean image or uncleaned ones
    parser.add_argument('--DEM_SAMP',type=bool,default=False)
    parser.add_argument('--SIM_RATE',type=float,default=0.5)
    parser.add_argument('--IMG_RATE',type=float,default=0.5)
    parser.add_argument('--TEXT_RATE',type=float,default=0.5)
    parser.add_argument('--CLIP_CLEAN',type=bool,default=False)
    #if using multi-query: similar to ensemble
    #do multiple inference with average pooling
    parser.add_argument('--MULTI_QUERY',type=bool,default=True)
    parser.add_argument('--NUM_QUERIES',type=int,default=4)
    
    #hyper parameters configuration
    parser.add_argument('--EMB_DROPOUT',type=float,default=0.0)
    parser.add_argument('--FC_DROPOUT',type=float,default=0.4) 
    parser.add_argument('--WEIGHT_DECAY',type=float,default=0.01) 
    parser.add_argument('--LR_RATE',type=float,default=1.3e-5) 
    parser.add_argument('--EPS',type=float,default=1e-8) 
    parser.add_argument('--BATCH_SIZE',type=int,default=16)
    parser.add_argument('--FIX_LAYERS',type=int,default=2)
    parser.add_argument('--MID_DIM',type=int,default=512)
    parser.add_argument('--NUM_HIDDEN',type=int,default=512)
    
    parser.add_argument('--LENGTH',type=int,default=64)
    parser.add_argument('--TOTAL_LENGTH',type=int,default=256)
    parser.add_argument('--PREFIX_LENGTH',type=int,default=10)
    parser.add_argument('--NUM_SAMPLE',type=int,default=1)
    parser.add_argument('--NUM_LAYER',type=int,default=8)
    parser.add_argument('--MODEL_NAME',type=str,default='roberta-large')
    parser.add_argument('--PRETRAIN_DATA',type=str,default='conceptual')
    parser.add_argument('--IMG_VERSION',type=str,default='clean')
    parser.add_argument('--MAPPING_TYPE',type=str,default='transformer')
    parser.add_argument('--ADD_ENT',type=bool,default=True)
    parser.add_argument('--ADD_DEM',type=bool,default=True)
    
    parser.add_argument('--DEBUG',type=bool,default=False)
    parser.add_argument('--SAVE',type=bool,default=False)
    parser.add_argument('--SAVE_NUM',type=int,default=100)
    parser.add_argument('--EPOCHS',type=int,default=10)
    
    parser.add_argument('--SEED', type=int, default=1111, help='random seed')
    parser.add_argument('--CUDA_DEVICE', type=int, default=15)
    
    parser.add_argument('--WARM_UP',type=int,default=2000)
    
    #MM models related
    parser.add_argument('--TRANS_LAYER',type=int,default=1)
    parser.add_argument('--NUM_HEAD',type=int,default=8)
    
    args=parser.parse_args()
    return args
